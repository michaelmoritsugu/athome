/* Auto-generated by genmsg_cpp for file /home/marco/fuerte_workspace/tbots_vision_pkg/feature_extraction/msg/CvSURFPoint.msg */
#ifndef FEATURE_EXTRACTION_MESSAGE_CVSURFPOINT_H
#define FEATURE_EXTRACTION_MESSAGE_CVSURFPOINT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "feature_extraction/CvPoint2D32f.h"

namespace feature_extraction
{
template <class ContainerAllocator>
struct CvSURFPoint_ {
  typedef CvSURFPoint_<ContainerAllocator> Type;

  CvSURFPoint_()
  : pt()
  , laplacian(0)
  , size(0)
  , dir(0.0)
  , hessian(0.0)
  {
  }

  CvSURFPoint_(const ContainerAllocator& _alloc)
  : pt(_alloc)
  , laplacian(0)
  , size(0)
  , dir(0.0)
  , hessian(0.0)
  {
  }

  typedef  ::feature_extraction::CvPoint2D32f_<ContainerAllocator>  _pt_type;
   ::feature_extraction::CvPoint2D32f_<ContainerAllocator>  pt;

  typedef int32_t _laplacian_type;
  int32_t laplacian;

  typedef int32_t _size_type;
  int32_t size;

  typedef float _dir_type;
  float dir;

  typedef float _hessian_type;
  float hessian;


  typedef boost::shared_ptr< ::feature_extraction::CvSURFPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::feature_extraction::CvSURFPoint_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CvSURFPoint
typedef  ::feature_extraction::CvSURFPoint_<std::allocator<void> > CvSURFPoint;

typedef boost::shared_ptr< ::feature_extraction::CvSURFPoint> CvSURFPointPtr;
typedef boost::shared_ptr< ::feature_extraction::CvSURFPoint const> CvSURFPointConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::feature_extraction::CvSURFPoint_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::feature_extraction::CvSURFPoint_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace feature_extraction

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::feature_extraction::CvSURFPoint_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::feature_extraction::CvSURFPoint_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::feature_extraction::CvSURFPoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "92d9319ec370a158af36e7154ee6f510";
  }

  static const char* value(const  ::feature_extraction::CvSURFPoint_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x92d9319ec370a158ULL;
  static const uint64_t static_value2 = 0xaf36e7154ee6f510ULL;
};

template<class ContainerAllocator>
struct DataType< ::feature_extraction::CvSURFPoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "feature_extraction/CvSURFPoint";
  }

  static const char* value(const  ::feature_extraction::CvSURFPoint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::feature_extraction::CvSURFPoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This message contains the same information as a CvSURFPoint from OpenCV2\n\
\n\
#fields for CvSURFPoint\n\
\n\
CvPoint2D32f pt\n\
\n\
# -1, 0 or +1. sign of the laplacian at the point.\n\
int32 laplacian \n\
\n\
# size of the feature\n\
int32 size \n\
\n\
# orientation of the feature: 0..360 degrees\n\
float32 dir \n\
\n\
# value of the hessian (can be used to\n\
# approximately estimate the feature strengths;\n\
# see also params.hessianThreshold)\n\
float32 hessian \n\
\n\
\n\
================================================================================\n\
MSG: feature_extraction/CvPoint2D32f\n\
float32 x\n\
float32 y\n\
\n\
";
  }

  static const char* value(const  ::feature_extraction::CvSURFPoint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::feature_extraction::CvSURFPoint_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::feature_extraction::CvSURFPoint_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pt);
    stream.next(m.laplacian);
    stream.next(m.size);
    stream.next(m.dir);
    stream.next(m.hessian);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CvSURFPoint_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::feature_extraction::CvSURFPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::feature_extraction::CvSURFPoint_<ContainerAllocator> & v) 
  {
    s << indent << "pt: ";
s << std::endl;
    Printer< ::feature_extraction::CvPoint2D32f_<ContainerAllocator> >::stream(s, indent + "  ", v.pt);
    s << indent << "laplacian: ";
    Printer<int32_t>::stream(s, indent + "  ", v.laplacian);
    s << indent << "size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.size);
    s << indent << "dir: ";
    Printer<float>::stream(s, indent + "  ", v.dir);
    s << indent << "hessian: ";
    Printer<float>::stream(s, indent + "  ", v.hessian);
  }
};


} // namespace message_operations
} // namespace ros

#endif // FEATURE_EXTRACTION_MESSAGE_CVSURFPOINT_H

