"""autogenerated by genpy from feature_extraction/CvSURFPoint.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import feature_extraction.msg

class CvSURFPoint(genpy.Message):
  _md5sum = "92d9319ec370a158af36e7154ee6f510"
  _type = "feature_extraction/CvSURFPoint"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# This message contains the same information as a CvSURFPoint from OpenCV2

#fields for CvSURFPoint

CvPoint2D32f pt

# -1, 0 or +1. sign of the laplacian at the point.
int32 laplacian 

# size of the feature
int32 size 

# orientation of the feature: 0..360 degrees
float32 dir 

# value of the hessian (can be used to
# approximately estimate the feature strengths;
# see also params.hessianThreshold)
float32 hessian 


================================================================================
MSG: feature_extraction/CvPoint2D32f
float32 x
float32 y

"""
  __slots__ = ['pt','laplacian','size','dir','hessian']
  _slot_types = ['feature_extraction/CvPoint2D32f','int32','int32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pt,laplacian,size,dir,hessian

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CvSURFPoint, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pt is None:
        self.pt = feature_extraction.msg.CvPoint2D32f()
      if self.laplacian is None:
        self.laplacian = 0
      if self.size is None:
        self.size = 0
      if self.dir is None:
        self.dir = 0.
      if self.hessian is None:
        self.hessian = 0.
    else:
      self.pt = feature_extraction.msg.CvPoint2D32f()
      self.laplacian = 0
      self.size = 0
      self.dir = 0.
      self.hessian = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2f2i2f.pack(_x.pt.x, _x.pt.y, _x.laplacian, _x.size, _x.dir, _x.hessian))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pt is None:
        self.pt = feature_extraction.msg.CvPoint2D32f()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.pt.x, _x.pt.y, _x.laplacian, _x.size, _x.dir, _x.hessian,) = _struct_2f2i2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2f2i2f.pack(_x.pt.x, _x.pt.y, _x.laplacian, _x.size, _x.dir, _x.hessian))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pt is None:
        self.pt = feature_extraction.msg.CvPoint2D32f()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.pt.x, _x.pt.y, _x.laplacian, _x.size, _x.dir, _x.hessian,) = _struct_2f2i2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2f2i2f = struct.Struct("<2f2i2f")
